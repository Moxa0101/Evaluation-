{
    "sourceFile": "test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1756230899400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756230935215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,9 +149,9 @@\n     if (scriptType.value === \"CE\" || scriptType.value === \"PE\") {\r\n       bodyData.option_type = atmDropdown.value;\r\n     }\r\n   } else {\r\n-    apiUrl = \"https://betabv4.algodelta.com/api/v4/users/jsonbridge/searchscriptv2\"; // Different API\r\n+    apiUrl = \"https://betabv4.algodelta.com/api/v4/scripts/searchscriptsbytype\"; // Different API\r\n     bodyData.type = scriptType.value;\r\n   }\r\n \r\n   try {\r\n"
                },
                {
                    "date": 1756231377897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,188 +1,246 @@\n-// ------------------ Tooltips ------------------\r\n-var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\r\n+// ----------------------- Bootstrap tooltips -----------------------\r\n+var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'))\r\n var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\r\n-  return new bootstrap.Tooltip(tooltipTriggerEl);\r\n+    return new bootstrap.Tooltip(tooltipTriggerEl)\r\n });\r\n \r\n-// ------------------ Monaco Editor ------------------\r\n+// ----------------------- Monaco Editor -----------------------\r\n let editor;\r\n-\r\n require.config({ paths: { vs: \"https://unpkg.com/monaco-editor@0.52.0/min/vs\" } });\r\n-\r\n require([\"vs/editor/editor.main\"], function () {\r\n-  const container = document.getElementsByClassName(\"generatedCode\")[0];\r\n+    const container = document.getElementsByClassName(\"generatedCode\")[0];\r\n \r\n-  function getCodeSnippet(activeType) {\r\n-    if (activeType === \"strategy_order\") {\r\n-      return `{\r\n-  \"type\": \"strategy_order\",\r\n-  \"exit_on_opposite\": false,\r\n-  \"is_tgt\": false,\r\n-  \"is_sl\": false,\r\n-  \"is_trail_set\": false,\r\n-  \"position_size\": \"{{strategy.position_size}}\",\r\n-  \"transaction_type\": \"{{strategy.order.action}}\"\r\n+    function getCodeSnippet(activeType) {\r\n+        if (activeType === \"strategy_order\") {\r\n+            return `{\r\n+    \"type\": \"strategy_order\",\r\n+    \"exit_on_opposite\": false,\r\n+    \"is_tgt\": false,\r\n+    \"is_sl\": false,\r\n+    \"is_trail_set\": false,\r\n+    \"position_size\": \"{{strategy.position_size}}\",\r\n+    \"transaction_type\": \"{{strategy.order.action}}\"\r\n }`;\r\n-    } else {\r\n-      return `{\r\n-  \"type\": \"${activeType}\"\r\n+        } else {\r\n+            return `{\r\n+    \"type\": \"${activeType}\"\r\n }`;\r\n+        }\r\n     }\r\n-  }\r\n \r\n-  window.getCodeSnippet = getCodeSnippet;\r\n+    window.getCodeSnippet = getCodeSnippet;\r\n \r\n-  editor = monaco.editor.create(container, {\r\n-    value: getCodeSnippet(\"strategy_order\"),\r\n-    language: \"json\",\r\n-    theme: \"vs-dark\",\r\n-    automaticLayout: true,\r\n-    fontSize: 18,\r\n-    minimap: { enabled: false },\r\n-    wordWrap: \"on\",\r\n-    scrollbar: { vertical: \"hidden\", horizontal: \"hidden\", handleMouseWheel: false }\r\n-  });\r\n+    editor = monaco.editor.create(container, {\r\n+        value: getCodeSnippet(\"strategy_order\"),\r\n+        language: \"json\",\r\n+        theme: \"vs-dark\",\r\n+        automaticLayout: true,\r\n+        suggestOnTriggerCharacters: false,\r\n+        quickSuggestions: false,\r\n+        wordBasedSuggestions: false,\r\n+        parameterHints: { enabled: false },\r\n+        inlineSuggest: { enabled: false },\r\n+        fontSize: 18,\r\n+        minimap: { enabled: false },\r\n+        wordWrap: \"on\",\r\n+        scrollbar: { vertical: \"hidden\", horizontal: \"hidden\", handleMouseWheel: false },\r\n+    });\r\n });\r\n \r\n-// ------------------ Navbar ------------------\r\n+// ----------------------- Active Navbar -----------------------\r\n let activeNav = \"strategy_order\"; // default\r\n const navLinks = document.querySelectorAll(\".nav-link\");\r\n \r\n navLinks.forEach(link => {\r\n-  link.addEventListener(\"click\", e => {\r\n-    e.preventDefault();\r\n-    navLinks.forEach(l => l.classList.remove(\"active\"));\r\n-    link.classList.add(\"active\");\r\n-    activeNav = link.getAttribute(\"data-type\");\r\n-    localStorage.setItem(\"activenav\", JSON.stringify(activeNav));\r\n-    editor.setValue(getCodeSnippet(activeNav));\r\n-    resetAllFields();\r\n-  });\r\n+    link.addEventListener(\"click\", (e) => {\r\n+        e.preventDefault();\r\n+        navLinks.forEach(l => l.classList.remove(\"active\"));\r\n+        link.classList.add(\"active\");\r\n+        activeNav = link.getAttribute(\"data-type\");\r\n+        localStorage.setItem(\"activenav\", JSON.stringify(activeNav));\r\n+        editor.setValue(getCodeSnippet(activeNav));\r\n+        resetAllFields();\r\n+    });\r\n });\r\n \r\n-// ------------------ Reset & Copy ------------------\r\n-document.getElementById(\"deleteBtn\").addEventListener(\"click\", function () {\r\n-  const activeNavItem = JSON.parse(localStorage.getItem(\"activenav\"));\r\n-  editor.setValue(getCodeSnippet(activeNavItem));\r\n-  resetAllFields();\r\n-});\r\n+// ----------------------- Reset & Hide Helpers -----------------------\r\n+function resetField(containerSelector, fieldSelector = null) {\r\n+    const container = document.querySelector(containerSelector);\r\n+    if (!container) return;\r\n+    container.style.display = \"none\";\r\n+    if (fieldSelector) {\r\n+        const field = container.querySelector(fieldSelector);\r\n+        if (!field) return;\r\n+        if (field.tagName === \"SELECT\") field.selectedIndex = 0;\r\n+        else if (field.tagName === \"INPUT\" || field.tagName === \"TEXTAREA\") field.value = \"\";\r\n+    }\r\n+}\r\n \r\n-document.getElementById(\"copyBtn\").addEventListener(\"click\", function () {\r\n-  if (!editor) return;\r\n-  navigator.clipboard.writeText(editor.getValue())\r\n-    .then(() => alert(\"Code copied to clipboard!\"))\r\n-    .catch(err => console.error(err));\r\n-});\r\n-\r\n-// ------------------ Field Dependencies ------------------\r\n function resetAllFields() {\r\n-  const containers = [\r\n-    \"#optionSelection\", \"#scriptsearchbox\", \"#premiumval\", \"#maxvariationCtn\",\r\n-    \"#AtmGap\", \"#expiryGap\", \"#expiryType\", \"#productType\", \"#quantityBox\",\r\n-    \"#limitPrice\", \"#triggetPrice\", \"#BtnGroup\", \"#toggleSwitchGroup\"\r\n-  ];\r\n-  containers.forEach(c => {\r\n-    const cont = document.querySelector(c);\r\n-    if (cont) {\r\n-      cont.style.display = \"none\";\r\n-      const input = cont.querySelector(\"input, select\");\r\n-      if (input) {\r\n-        if (input.tagName === \"SELECT\") input.selectedIndex = 0;\r\n-        else input.value = \"\";\r\n-      }\r\n-    }\r\n-  });\r\n+    resetField(\"#optionSelection\", \"#atmdropdown\");\r\n+    resetField(\"#scriptsearchbox\", \"#search\");\r\n+    resetField(\"#premiumval\", \"#premiumbox\");\r\n+    resetField(\"#maxvariationCtn\", \"#maxvariationbox\");\r\n+    resetField(\"#AtmGap\", \"#atmgapbox\");\r\n+    resetField(\"#expiryGap\", \"#futExpiryGap\");\r\n+    resetField(\"#expiryType\", \"#timelineDropdown\");\r\n+    resetField(\"#productType\", \"#productDropdown\");\r\n+    resetField(\"#quantityBox\", \"#quantityBox\");\r\n+    resetField(\"#limitPrice\", \"#priceLimit\");\r\n+    resetField(\"#triggetPrice\", \"#triggerprice\");\r\n+    resetField(\"#BtnGroup\");\r\n }\r\n \r\n-// ------------------ Script Type ------------------\r\n-const scriptType = document.getElementById(\"dropdown1\");\r\n+// ----------------------- DOM References -----------------------\r\n+const scriptTypeDropdown = document.getElementById(\"dropdown1\");\r\n const optionSelection = document.getElementById(\"optionSelection\");\r\n-const searchBox = document.getElementById(\"scriptsearchbox\");\r\n-\r\n-scriptType.addEventListener(\"change\", function () {\r\n-  resetAllFields();\r\n-  if (activeNav === \"strategy_order\" && (scriptType.value === \"CE\" || scriptType.value === \"PE\")) {\r\n-    optionSelection.style.display = \"block\";\r\n-  } else {\r\n-    searchBox.style.display = \"block\";\r\n-  }\r\n-});\r\n-\r\n-// ------------------ Option Selection ------------------\r\n const atmDropdown = document.getElementById(\"atmdropdown\");\r\n-atmDropdown.addEventListener(\"change\", function () {\r\n-  resetAllFields();\r\n-  document.getElementById(\"AtmGap\").style.display = \"block\";\r\n-});\r\n-\r\n-// ------------------ Script Search ------------------\r\n const searchInput = document.getElementById(\"search\");\r\n-const dropdown = document.getElementById('dropdown');\r\n-let token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoyLCJmcmNoX2lkIjoxLCJlbWFpbCI6ImRldjMuYWxnb2RlbHRhQGdtYWlsLmNvbSIsIm1vYmlsZV9ubyI6IjkzMTMxODM4NDciLCJjdXN0X2lkIjoiNzM1NTQ3IiwiZW52IjoibWFpbiIsInVzZXJfdHlwZSI6InVzZXIiLCJpYXQiOjE3NTYxODc4MTIsImV4cCI6MTc1NjI3NDIxMn0.gXoY2DWtFgVNYrud7j88O-KLCwlpkUX6h30ANgYu6TU\"; // truncated\r\n+const scriptSearchBox = document.getElementById(\"scriptsearchbox\");\r\n+const dropdown = document.getElementById(\"dropdown\");\r\n+const productDropdown = document.getElementById(\"productDropdown\");\r\n+const quantityBox = document.getElementById(\"quantityBox\");\r\n+const limitPrice = document.getElementById(\"limitPrice\");\r\n+const triggerPrice = document.getElementById(\"triggetPrice\");\r\n+const btnGroup = document.getElementById(\"BtnGroup\");\r\n+const premiumBox = document.getElementById(\"premiumbox\");\r\n+const atmGapBox = document.getElementById(\"atmgapbox\");\r\n \r\n-document.addEventListener('click', e => {\r\n-  if (!searchInput.contains(e.target) && !dropdown.contains(e.target)) dropdown.style.display = 'none';\r\n-});\r\n-\r\n+// ----------------------- Debounce -----------------------\r\n function debounce(func, delay) {\r\n-  let timer;\r\n-  return function (...args) {\r\n-    clearTimeout(timer);\r\n-    timer = setTimeout(() => func.apply(this, args), delay);\r\n-  };\r\n+    let timer;\r\n+    return function (...args) {\r\n+        clearTimeout(timer);\r\n+        timer = setTimeout(() => func.apply(this, args), delay);\r\n+    };\r\n }\r\n \r\n-// ------------------ Fetch Suggestions ------------------\r\n-async function fetchSuggestions(query) {\r\n-  if (!query) {\r\n-    dropdown.style.display = 'none';\r\n-    dropdown.innerHTML = '';\r\n-    return;\r\n-  }\r\n+// ----------------------- API Calls -----------------------\r\n+let token = \"YOUR_API_TOKEN_HERE\"; // replace with real token\r\n \r\n-  let apiUrl;\r\n-  let bodyData = { script: query };\r\n+async function fetchScriptSuggestions(query, type) {\r\n+    if (!query) {\r\n+        dropdown.style.display = \"none\";\r\n+        dropdown.innerHTML = \"\";\r\n+        return;\r\n+    }\r\n \r\n-  if (activeNav === \"strategy_order\") {\r\n-    apiUrl = \"https://betabv4.algodelta.com/api/v4/users/jsonbridge/searchscript\";\r\n-    bodyData.type = scriptType.value;\r\n-    if (scriptType.value === \"CE\" || scriptType.value === \"PE\") {\r\n-      bodyData.option_type = atmDropdown.value;\r\n+    let url;\r\n+    let payload = { script: query };\r\n+\r\n+    if (activeNav === \"strategy_order\") {\r\n+        url = \"https://betabv4.algodelta.com/api/v4/users/jsonbridge/searchscript\";\r\n+        payload.type = type; // type from dropdown before search\r\n+    } else {\r\n+        url = \"https://betabv4.algodelta.com/api/v4/users/jsonbridge/searchscript\";\r\n+        payload.type = scriptTypeDropdown.value;\r\n     }\r\n-  } else {\r\n-    apiUrl = \"https://betabv4.algodelta.com/api/v4/scripts/searchscriptsbytype\"; // Different API\r\n-    bodyData.type = scriptType.value;\r\n-  }\r\n \r\n-  try {\r\n-    const res = await fetch(apiUrl, {\r\n-      method: \"POST\",\r\n-      headers: { \"Content-Type\": \"application/json\", \"Authorization\": token },\r\n-      body: JSON.stringify(bodyData)\r\n-    });\r\n-    const data = await res.json();\r\n-    const suggestions = data.data || [];\r\n-    dropdown.innerHTML = suggestions.map(item => `<li>${item.script} (${item.exchange})</li>`).join('');\r\n-    dropdown.style.display = suggestions.length ? 'block' : 'none';\r\n-  } catch (err) { console.error(err); }\r\n+    try {\r\n+        const res = await fetch(url, {\r\n+            method: \"POST\",\r\n+            headers: { \"Content-Type\": \"application/json\", \"Authorization\": token },\r\n+            body: JSON.stringify(payload)\r\n+        });\r\n+        const data = await res.json();\r\n+        const suggestions = data.data;\r\n+        dropdown.innerHTML = suggestions.map(item => `<li>${item.script} (${item.exchange})</li>`).join('');\r\n+        dropdown.style.display = suggestions.length ? 'block' : 'none';\r\n+    } catch (err) {\r\n+        console.error(err);\r\n+    }\r\n }\r\n \r\n-searchInput.addEventListener('input', debounce(e => fetchSuggestions(e.target.value), 300));\r\n+// ----------------------- Script Type Change -----------------------\r\n+scriptTypeDropdown.addEventListener(\"change\", function () {\r\n+    resetAllFields();\r\n+    if (activeNav === \"strategy_order\" && (this.value === \"CE\" || this.value === \"PE\")) {\r\n+        optionSelection.style.display = \"block\";\r\n+        scriptSearchBox.style.display = \"none\";\r\n+    } else {\r\n+        scriptSearchBox.style.display = \"block\";\r\n+        optionSelection.style.display = \"none\";\r\n+    }\r\n+});\r\n \r\n+// ----------------------- Option Selection Change -----------------------\r\n+atmDropdown.addEventListener(\"change\", function () {\r\n+    resetField(\"#AtmGap\", \"#atmgapbox\");\r\n+    if (this.value === \"ATM_BASED\") {\r\n+        // show ATM Gap after script is selected\r\n+        if (searchInput.value.trim()) {\r\n+            document.getElementById(\"AtmGap\").style.display = \"block\";\r\n+        }\r\n+    }\r\n+});\r\n+\r\n+// ----------------------- Script Search -----------------------\r\n+searchInput.addEventListener(\"input\", debounce(e => {\r\n+    let selectedOptionType = atmDropdown.value;\r\n+    fetchScriptSuggestions(e.target.value, selectedOptionType);\r\n+}, 300));\r\n+\r\n+document.addEventListener('click', (e) => {\r\n+    if (!searchInput.contains(e.target) && !dropdown.contains(e.target)) {\r\n+        dropdown.style.display = 'none';\r\n+    }\r\n+});\r\n+\r\n dropdown.addEventListener('click', e => {\r\n-  if (e.target.tagName === 'LI') {\r\n-    let selectedText = e.target.textContent.split(\"(\")[0].trim();\r\n-    searchInput.value = selectedText;\r\n-    dropdown.style.display = 'none';\r\n+    if (e.target.tagName === \"LI\") {\r\n+        let selectedText = e.target.textContent.split(\"(\")[0].trim();\r\n+        searchInput.value = selectedText;\r\n+        dropdown.style.display = \"none\";\r\n \r\n-    let currentValue = editor.getValue().trim();\r\n-    if (/\"script\"\\s*:\\s*\".*?\"/.test(currentValue)) {\r\n-      currentValue = currentValue.replace(/(\"script\"\\s*:\\s*\").*?(\")[\\s\\S]*$/, `$1${selectedText}$2\\n}`);\r\n-    } else {\r\n-      if (currentValue.endsWith(\"}\")) currentValue = currentValue.slice(0, -1).trim();\r\n-      currentValue = currentValue.replace(/,\\s*$/, \"\");\r\n-      currentValue += `,\\n\\t\"script\":\"${selectedText}\"\\n}`;\r\n+        // ---------------- Update Monaco Editor ----------------\r\n+        let currentValue = editor.getValue().trim();\r\n+        if (/\"script\"\\s*:\\s*\".*?\"/.test(currentValue)) {\r\n+            currentValue = currentValue.replace(\r\n+                /(\"script\"\\s*:\\s*\").*?(\")[\\s\\S]*$/,\r\n+                `$1${selectedText}$2\\n}`\r\n+            );\r\n+        } else {\r\n+            if (currentValue.endsWith(\"}\")) currentValue = currentValue.slice(0, -1).trim();\r\n+            currentValue = currentValue.replace(/,\\s*$/, \"\");\r\n+            currentValue += `,\\n\\t\"script\":\"${selectedText}\"\\n}`;\r\n+        }\r\n+        editor.setValue(currentValue);\r\n+\r\n+        // ---------------- Show next fields ----------------\r\n+        productDropdown.parentElement.style.display = \"block\";\r\n     }\r\n-    editor.setValue(currentValue);\r\n-  }\r\n });\r\n+\r\n+// ----------------------- Product Selection -----------------------\r\n+productDropdown.addEventListener(\"change\", function () {\r\n+    quantityBox.style.display = \"block\";\r\n+});\r\n+\r\n+// ----------------------- Quantity Input -----------------------\r\n+const quantityInput = quantityBox.querySelector(\"input\");\r\n+quantityInput.addEventListener(\"input\", function () {\r\n+    if (activeNav === \"limit_order\" || activeNav === \"sl_order\") {\r\n+        limitPrice.style.display = \"block\";\r\n+        triggerPrice.style.display = \"block\";\r\n+    } else if (activeNav === \"strategy_order\") {\r\n+        triggerPrice.style.display = \"block\";\r\n+    }\r\n+});\r\n+\r\n+// ----------------------- Trigger / Limit Price -----------------------\r\n+triggerPrice.querySelector(\"input\").addEventListener(\"input\", function () {\r\n+    btnGroup.style.display = \"block\";\r\n+});\r\n+\r\n+// ----------------------- Delete & Copy -----------------------\r\n+document.getElementById(\"deleteBtn\").addEventListener(\"click\", function () {\r\n+    editor.setValue(getCodeSnippet(activeNav));\r\n+    resetAllFields();\r\n+});\r\n+\r\n+document.getElementById(\"copyBtn\")?.addEventListener(\"click\", function () {\r\n+    const code = editor.getValue();\r\n+    navigator.clipboard.writeText(code)\r\n+        .then(() => alert(\"Code copied to clipboard!\"))\r\n+        .catch(err => console.error(\"Failed to copy: \", err));\r\n+});\r\n"
                },
                {
                    "date": 1756231461992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,9 @@\n     };\r\n }\r\n \r\n // ----------------------- API Calls -----------------------\r\n-let token = \"YOUR_API_TOKEN_HERE\"; // replace with real token\r\n+let token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoyLCJmcmNoX2lkIjoxLCJlbWFpbCI6ImRldjMuYWxnb2RlbHRhQGdtYWlsLmNvbSIsIm1vYmlsZV9ubyI6IjkzMTMxODM4NDciLCJjdXN0X2lkIjoiNzM1NTQ3IiwiZW52IjoibWFpbiIsInVzZXJfdHlwZSI6InVzZXIiLCJpYXQiOjE3NTYyMzE0MjMsImV4cCI6MTc1NjMxNzgyM30.xxJkyXsONt77WgWhsS6OxUAvj3TzHcL06vGCl2C4lRw\"; // replace with real token\r\n \r\n async function fetchScriptSuggestions(query, type) {\r\n     if (!query) {\r\n         dropdown.style.display = \"none\";\r\n"
                },
                {
                    "date": 1756231674478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n     let payload = { script: query };\r\n \r\n     if (activeNav === \"strategy_order\") {\r\n         url = \"https://betabv4.algodelta.com/api/v4/users/jsonbridge/searchscript\";\r\n-        payload.type = type; // type from dropdown before search\r\n+        payload.type = scriptTypeDropdown.value; // type from dropdown before search\r\n     } else {\r\n         url = \"https://betabv4.algodelta.com/api/v4/users/jsonbridge/searchscript\";\r\n         payload.type = scriptTypeDropdown.value;\r\n     }\r\n"
                },
                {
                    "date": 1756286186100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,246 +1,371 @@\n-// ----------------------- Bootstrap tooltips -----------------------\r\n-var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'))\r\n+\r\n+/* =====================\r\n+   Optimized apply.js\r\n+   - Keeps full functionality from syntaxGenerator.js for Strategy Order\r\n+   - Adds config-driven flows for other nav types (limit_order, sl_order, etc.)\r\n+   - Debounced API search per nav\r\n+   - Robust JSON upserts into Monaco editor (string-safe)\r\n+   - Single source of truth for UI state + listeners\r\n+   ===================== */\r\n+\r\n+// ---- Tooltips ----\r\n+var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\r\n var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\r\n-    return new bootstrap.Tooltip(tooltipTriggerEl)\r\n+  return new bootstrap.Tooltip(tooltipTriggerEl);\r\n });\r\n \r\n-// ----------------------- Monaco Editor -----------------------\r\n+// ---- Monaco Editor ----\r\n let editor;\r\n+\r\n require.config({ paths: { vs: \"https://unpkg.com/monaco-editor@0.52.0/min/vs\" } });\r\n+\r\n require([\"vs/editor/editor.main\"], function () {\r\n-    const container = document.getElementsByClassName(\"generatedCode\")[0];\r\n+  window.getCodeSnippet = getCodeSnippet;\r\n \r\n-    function getCodeSnippet(activeType) {\r\n-        if (activeType === \"strategy_order\") {\r\n-            return `{\r\n-    \"type\": \"strategy_order\",\r\n-    \"exit_on_opposite\": false,\r\n-    \"is_tgt\": false,\r\n-    \"is_sl\": false,\r\n-    \"is_trail_set\": false,\r\n-    \"position_size\": \"{{strategy.position_size}}\",\r\n-    \"transaction_type\": \"{{strategy.order.action}}\"\r\n+  const container = document.getElementsByClassName(\"generatedCode\")[0];\r\n+\r\n+  editor = monaco.editor.create(container, {\r\n+    value: getCodeSnippet(\"strategy_order\"),\r\n+    language: \"json\",\r\n+    theme: \"vs-dark\",\r\n+    automaticLayout: true,\r\n+    suggestOnTriggerCharacters: false,\r\n+    quickSuggestions: false,\r\n+    wordBasedSuggestions: false,\r\n+    parameterHints: { enabled: false },\r\n+    inlineSuggest: { enabled: false },\r\n+    fontSize: 18,\r\n+    minimap: { enabled: false },\r\n+    wordWrap: \"on\",\r\n+    scrollbar: { vertical: \"hidden\", horizontal: \"hidden\", handleMouseWheel: false },\r\n+  });\r\n+\r\n+  // After editor is ready, wire UI\r\n+  initUI();\r\n+});\r\n+\r\n+// ---- Code Snippet Template ----\r\n+function getCodeSnippet(activeType) {\r\n+  if (activeType === \"strategy_order\") {\r\n+    return `{\r\n+  \"type\": \"strategy_order\",\r\n+  \"exit_on_opposite\": false,\r\n+  \"is_tgt\": false,\r\n+  \"is_sl\": false,\r\n+  \"is_trail_set\": false,\r\n+  \"position_size\": \"{{strategy.position_size}}\",\r\n+  \"transaction_type\": \"{{strategy.order.action}}\"\r\n }`;\r\n-        } else {\r\n-            return `{\r\n-    \"type\": \"${activeType}\"\r\n+  } else {\r\n+    return `{\r\n+  \"type\": \"${activeType}\"\r\n }`;\r\n-        }\r\n-    }\r\n+  }\r\n+}\r\n \r\n-    window.getCodeSnippet = getCodeSnippet;\r\n+// ---- Config (URLs per nav & flows) ----\r\n+// Replace these endpoints with your real ones per nav\r\n+const ENDPOINTS = {\r\n+  strategy_order: {\r\n+    searchScript: \"https://api.example.com/strategy/searchscript\" // original behaviour\r\n+  },\r\n+  limit_order: {\r\n+    searchScript: \"https://api.example.com/limit/searchscript\"\r\n+  },\r\n+  sl_order: {\r\n+    // As per your note: for SL, dropdown selection triggers script suggestion from a *different* API\r\n+    searchScript: \"https://api.example.com/sl/searchscript\"\r\n+  },\r\n+  squareoff: {\r\n+    searchScript: \"https://api.example.com/squareoff/searchscript\"\r\n+  },\r\n+  cancel: {\r\n+    searchScript: \"https://api.example.com/cancel/searchscript\"\r\n+  }\r\n+};\r\n \r\n-    editor = monaco.editor.create(container, {\r\n-        value: getCodeSnippet(\"strategy_order\"),\r\n-        language: \"json\",\r\n-        theme: \"vs-dark\",\r\n-        automaticLayout: true,\r\n-        suggestOnTriggerCharacters: false,\r\n-        quickSuggestions: false,\r\n-        wordBasedSuggestions: false,\r\n-        parameterHints: { enabled: false },\r\n-        inlineSuggest: { enabled: false },\r\n-        fontSize: 18,\r\n-        minimap: { enabled: false },\r\n-        wordWrap: \"on\",\r\n-        scrollbar: { vertical: \"hidden\", horizontal: \"hidden\", handleMouseWheel: false },\r\n-    });\r\n-});\r\n+// Flow/visibility per nav (keep it simple & predictable)\r\n+const FLOWS = {\r\n+  strategy_order: [\r\n+    // Product -> Quantity -> Buy/Sell -> Toggles (target/sl/trail/rollover)\r\n+    { trigger: \"#productDropdown\", show: [\"#quantityBox\", \"#BtnGroup\", \"#toggleSwitchGroup\"] },\r\n+  ],\r\n+  limit_order: [\r\n+    // Product -> Qty -> Limit Price -> Buy/Sell\r\n+    { trigger: \"#productDropdown\", show: [\"#quantityBox\", \"#limitPrice\", \"#BtnGroup\"] },\r\n+  ],\r\n+  sl_order: [\r\n+    // Product -> Qty -> Trigger Price -> Buy/Sell\r\n+    { trigger: \"#productDropdown\", show: [\"#quantityBox\", \"#triggetPrice\", \"#BtnGroup\"] },\r\n+  ],\r\n+};\r\n \r\n-// ----------------------- Active Navbar -----------------------\r\n+// ---- State ----\r\n let activeNav = \"strategy_order\"; // default\r\n const navLinks = document.querySelectorAll(\".nav-link\");\r\n \r\n-navLinks.forEach(link => {\r\n-    link.addEventListener(\"click\", (e) => {\r\n-        e.preventDefault();\r\n-        navLinks.forEach(l => l.classList.remove(\"active\"));\r\n-        link.classList.add(\"active\");\r\n-        activeNav = link.getAttribute(\"data-type\");\r\n-        localStorage.setItem(\"activenav\", JSON.stringify(activeNav));\r\n-        editor.setValue(getCodeSnippet(activeNav));\r\n-        resetAllFields();\r\n-    });\r\n-});\r\n+// ---- Utilities ----\r\n+function debounce(fn, wait) {\r\n+  let t;\r\n+  return (...args) => {\r\n+    clearTimeout(t);\r\n+    t = setTimeout(() => fn.apply(null, args), wait);\r\n+  };\r\n+}\r\n \r\n-// ----------------------- Reset & Hide Helpers -----------------------\r\n-function resetField(containerSelector, fieldSelector = null) {\r\n-    const container = document.querySelector(containerSelector);\r\n-    if (!container) return;\r\n-    container.style.display = \"none\";\r\n-    if (fieldSelector) {\r\n-        const field = container.querySelector(fieldSelector);\r\n-        if (!field) return;\r\n-        if (field.tagName === \"SELECT\") field.selectedIndex = 0;\r\n-        else if (field.tagName === \"INPUT\" || field.tagName === \"TEXTAREA\") field.value = \"\";\r\n-    }\r\n+// Safely add/replace a top-level JSON key in the string shown in Monaco\r\n+function upsertJsonStringKey(key, value, { quote = true } = {}) {\r\n+  if (!editor) return;\r\n+  let code = editor.getValue();\r\n+  const escapedKey = key.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\r\n+  const pattern = new RegExp(`(\"` + escapedKey + `\"\\s*:\\s*)([^,}\\\\n]+)`, \"m\");\r\n+  const finalVal = quote ? `\"${value}\"` : `${value}`;\r\n+\r\n+  if (pattern.test(code)) {\r\n+    code = code.replace(pattern, `$1${finalVal}`);\r\n+  } else {\r\n+    // append before the last }\r\n+    code = code.trim();\r\n+    if (code.endsWith(\"}\")) code = code.slice(0, -1);\r\n+    // remove trailing comma if present\r\n+    code = code.replace(/,\\s*$/, \"\");\r\n+    code += `,\\n  \"${key}\": ${finalVal}\\n}`;\r\n+  }\r\n+  editor.setValue(code);\r\n }\r\n \r\n-function resetAllFields() {\r\n-    resetField(\"#optionSelection\", \"#atmdropdown\");\r\n-    resetField(\"#scriptsearchbox\", \"#search\");\r\n-    resetField(\"#premiumval\", \"#premiumbox\");\r\n-    resetField(\"#maxvariationCtn\", \"#maxvariationbox\");\r\n-    resetField(\"#AtmGap\", \"#atmgapbox\");\r\n-    resetField(\"#expiryGap\", \"#futExpiryGap\");\r\n-    resetField(\"#expiryType\", \"#timelineDropdown\");\r\n-    resetField(\"#productType\", \"#productDropdown\");\r\n-    resetField(\"#quantityBox\", \"#quantityBox\");\r\n-    resetField(\"#limitPrice\", \"#priceLimit\");\r\n-    resetField(\"#triggetPrice\", \"#triggerprice\");\r\n-    resetField(\"#BtnGroup\");\r\n+function setTransactionType(type) {\r\n+  upsertJsonStringKey(\"transaction_type\", type, { quote: true });\r\n }\r\n \r\n-// ----------------------- DOM References -----------------------\r\n-const scriptTypeDropdown = document.getElementById(\"dropdown1\");\r\n-const optionSelection = document.getElementById(\"optionSelection\");\r\n-const atmDropdown = document.getElementById(\"atmdropdown\");\r\n-const searchInput = document.getElementById(\"search\");\r\n-const scriptSearchBox = document.getElementById(\"scriptsearchbox\");\r\n-const dropdown = document.getElementById(\"dropdown\");\r\n-const productDropdown = document.getElementById(\"productDropdown\");\r\n-const quantityBox = document.getElementById(\"quantityBox\");\r\n-const limitPrice = document.getElementById(\"limitPrice\");\r\n-const triggerPrice = document.getElementById(\"triggetPrice\");\r\n-const btnGroup = document.getElementById(\"BtnGroup\");\r\n-const premiumBox = document.getElementById(\"premiumbox\");\r\n-const atmGapBox = document.getElementById(\"atmgapbox\");\r\n+function ensureBooleanKey(key, boolVal) {\r\n+  if (!editor) return;\r\n+  let code = editor.getValue();\r\n+  const pattern = new RegExp(`(\"` + key + `\"\\s*:\\s*)(true|false)`, \"m\");\r\n+  if (pattern.test(code)) {\r\n+    code = code.replace(pattern, `$1${boolVal}`);\r\n+  } else {\r\n+    code = code.trim();\r\n+    if (code.endsWith(\"}\")) code = code.slice(0, -1);\r\n+    code = code.replace(/,\\s*$/, \"\");\r\n+    code += `,\\n  \"${key}\": ${boolVal}\\n}`;\r\n+  }\r\n+  editor.setValue(code);\r\n+}\r\n \r\n-// ----------------------- Debounce -----------------------\r\n-function debounce(func, delay) {\r\n-    let timer;\r\n-    return function (...args) {\r\n-        clearTimeout(timer);\r\n-        timer = setTimeout(() => func.apply(this, args), delay);\r\n-    };\r\n+// Reset and hide a list of selectors\r\n+function hideAll(selectors) {\r\n+  selectors.forEach(sel => {\r\n+    const el = document.querySelector(sel);\r\n+    if (!el) return;\r\n+    el.style.display = \"none\";\r\n+    // soft reset for inputs\r\n+    const inputs = el.querySelectorAll(\"input, select, textarea\");\r\n+    inputs.forEach(inp => {\r\n+      if (inp.tagName === \"SELECT\") inp.selectedIndex = 0;\r\n+      else if (inp.type === \"checkbox\" || inp.type === \"radio\") inp.checked = false;\r\n+      else inp.value = \"\";\r\n+    });\r\n+  });\r\n }\r\n \r\n-// ----------------------- API Calls -----------------------\r\n-let token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoyLCJmcmNoX2lkIjoxLCJlbWFpbCI6ImRldjMuYWxnb2RlbHRhQGdtYWlsLmNvbSIsIm1vYmlsZV9ubyI6IjkzMTMxODM4NDciLCJjdXN0X2lkIjoiNzM1NTQ3IiwiZW52IjoibWFpbiIsInVzZXJfdHlwZSI6InVzZXIiLCJpYXQiOjE3NTYyMzE0MjMsImV4cCI6MTc1NjMxNzgyM30.xxJkyXsONt77WgWhsS6OxUAvj3TzHcL06vGCl2C4lRw\"; // replace with real token\r\n+function showAll(selectors) {\r\n+  selectors.forEach(sel => {\r\n+    const el = document.querySelector(sel);\r\n+    if (el) el.style.display = \"block\";\r\n+  });\r\n+}\r\n \r\n-async function fetchScriptSuggestions(query, type) {\r\n-    if (!query) {\r\n-        dropdown.style.display = \"none\";\r\n-        dropdown.innerHTML = \"\";\r\n-        return;\r\n-    }\r\n+// ---- API: Script suggestions (per nav) ----\r\n+async function fetchScriptSuggestions(q) {\r\n+  const currentNav = activeNav || \"strategy_order\";\r\n+  const url = (ENDPOINTS[currentNav] && ENDPOINTS[currentNav].searchScript) || ENDPOINTS.strategy_order.searchScript;\r\n+  try {\r\n+    const res = await fetch(url, {\r\n+      method: \"POST\",\r\n+      headers: { \"Content-Type\": \"application/json\" },\r\n+      body: JSON.stringify({ query: q })\r\n+    });\r\n+    if (!res.ok) throw new Error(\"Network error\");\r\n+    const data = await res.json();\r\n+    // Expect data as array of { name, value } or strings\r\n+    return Array.isArray(data) ? data : [];\r\n+  } catch (e) {\r\n+    console.warn(\"fetchScriptSuggestions failed:\", e.message);\r\n+    return [];\r\n+  }\r\n+}\r\n \r\n-    let url;\r\n-    let payload = { script: query };\r\n+const debouncedSuggest = debounce(async (q) => {\r\n+  const list = document.getElementById(\"suggestList\");\r\n+  if (!list) return;\r\n+  list.innerHTML = \"\";\r\n+  if (!q) return;\r\n \r\n-    if (activeNav === \"strategy_order\") {\r\n-        url = \"https://betabv4.algodelta.com/api/v4/users/jsonbridge/searchscript\";\r\n-        payload.type = scriptTypeDropdown.value; // type from dropdown before search\r\n-    } else {\r\n-        url = \"https://betabv4.algodelta.com/api/v4/users/jsonbridge/searchscript\";\r\n-        payload.type = scriptTypeDropdown.value;\r\n-    }\r\n+  const suggestions = await fetchScriptSuggestions(q);\r\n+  suggestions.forEach(item => {\r\n+    const text = typeof item === \"string\" ? item : (item.name || item.value || \"\");\r\n+    if (!text) return;\r\n+    const li = document.createElement(\"li\");\r\n+    li.textContent = text;\r\n+    li.className = \"list-group-item\";\r\n+    li.addEventListener(\"click\", () => {\r\n+      upsertJsonStringKey(\"script\", text, { quote: true });\r\n+      list.innerHTML = \"\";\r\n+      const input = document.getElementById(\"search\");\r\n+      if (input) input.value = text;\r\n+    });\r\n+    list.appendChild(li);\r\n+  });\r\n+}, 350);\r\n \r\n-    try {\r\n-        const res = await fetch(url, {\r\n-            method: \"POST\",\r\n-            headers: { \"Content-Type\": \"application/json\", \"Authorization\": token },\r\n-            body: JSON.stringify(payload)\r\n-        });\r\n-        const data = await res.json();\r\n-        const suggestions = data.data;\r\n-        dropdown.innerHTML = suggestions.map(item => `<li>${item.script} (${item.exchange})</li>`).join('');\r\n-        dropdown.style.display = suggestions.length ? 'block' : 'none';\r\n-    } catch (err) {\r\n-        console.error(err);\r\n-    }\r\n-}\r\n+// ---- Main UI wiring ----\r\n+function initUI() {\r\n+  // Nav links\r\n+  navLinks.forEach(link => {\r\n+    link.addEventListener(\"click\", (e) => {\r\n+      e.preventDefault();\r\n+      navLinks.forEach(l => l.classList.remove(\"active\"));\r\n+      link.classList.add(\"active\");\r\n+      activeNav = link.getAttribute(\"data-type\") || \"strategy_order\";\r\n+      localStorage.setItem(\"activenav\", JSON.stringify(activeNav));\r\n+      editor.setValue(getCodeSnippet(activeNav));\r\n \r\n-// ----------------------- Script Type Change -----------------------\r\n-scriptTypeDropdown.addEventListener(\"change\", function () {\r\n-    resetAllFields();\r\n-    if (activeNav === \"strategy_order\" && (this.value === \"CE\" || this.value === \"PE\")) {\r\n-        optionSelection.style.display = \"block\";\r\n-        scriptSearchBox.style.display = \"none\";\r\n-    } else {\r\n-        scriptSearchBox.style.display = \"block\";\r\n-        optionSelection.style.display = \"none\";\r\n-    }\r\n-});\r\n+      // hide all optional blocks on nav change\r\n+      hideAll([\"#quantityBox\", \"#limitPrice\", \"#triggetPrice\", \"#BtnGroup\", \"#toggleSwitchGroup\"]);\r\n+      const search = document.getElementById(\"search\");\r\n+      if (search) { search.value = \"\"; const list = document.getElementById(\"suggestList\"); if (list) list.innerHTML = \"\"; }\r\n+    });\r\n+  });\r\n \r\n-// ----------------------- Option Selection Change -----------------------\r\n-atmDropdown.addEventListener(\"change\", function () {\r\n-    resetField(\"#AtmGap\", \"#atmgapbox\");\r\n-    if (this.value === \"ATM_BASED\") {\r\n-        // show ATM Gap after script is selected\r\n-        if (searchInput.value.trim()) {\r\n-            document.getElementById(\"AtmGap\").style.display = \"block\";\r\n-        }\r\n-    }\r\n-});\r\n+  // Delete = reset JSON to template of current nav\r\n+  const deleteBtn = document.getElementById(\"deleteBtn\");\r\n+  if (deleteBtn) {\r\n+    deleteBtn.addEventListener(\"click\", () => {\r\n+      const activeNavItem = JSON.parse(localStorage.getItem(\"activenav\") || '\"strategy_order\"');\r\n+      editor.setValue(getCodeSnippet(activeNavItem));\r\n+      const scriptType = document.getElementById(\"dropdown1\");\r\n+      if (scriptType) scriptType.selectedIndex = 0;\r\n+    });\r\n+  }\r\n \r\n-// ----------------------- Script Search -----------------------\r\n-searchInput.addEventListener(\"input\", debounce(e => {\r\n-    let selectedOptionType = atmDropdown.value;\r\n-    fetchScriptSuggestions(e.target.value, selectedOptionType);\r\n-}, 300));\r\n+  // Copy\r\n+  const copyBtn = document.getElementById(\"copyBtn\");\r\n+  if (copyBtn) {\r\n+    copyBtn.addEventListener(\"click\", () => {\r\n+      if (!editor) return;\r\n+      const code = editor.getValue();\r\n+      navigator.clipboard.writeText(code).then(() => alert(\"Code copied to clipboard!\"));\r\n+    });\r\n+  }\r\n \r\n-document.addEventListener('click', (e) => {\r\n-    if (!searchInput.contains(e.target) && !dropdown.contains(e.target)) {\r\n-        dropdown.style.display = 'none';\r\n-    }\r\n-});\r\n+  // Product -> shows downstream controls per nav (FLOWS)\r\n+  const productDropdown = document.getElementById(\"productDropdown\");\r\n+  if (productDropdown) {\r\n+    productDropdown.addEventListener(\"change\", function () {\r\n+      const val = this.value;\r\n+      if (!val) return;\r\n+      upsertJsonStringKey(\"product\", val, { quote: true });\r\n \r\n-dropdown.addEventListener('click', e => {\r\n-    if (e.target.tagName === \"LI\") {\r\n-        let selectedText = e.target.textContent.split(\"(\")[0].trim();\r\n-        searchInput.value = selectedText;\r\n-        dropdown.style.display = \"none\";\r\n+      const flow = FLOWS[activeNav] || [];\r\n+      const rule = flow.find(r => r.trigger === \"#productDropdown\");\r\n+      if (rule) showAll(rule.show);\r\n \r\n-        // ---------------- Update Monaco Editor ----------------\r\n-        let currentValue = editor.getValue().trim();\r\n-        if (/\"script\"\\s*:\\s*\".*?\"/.test(currentValue)) {\r\n-            currentValue = currentValue.replace(\r\n-                /(\"script\"\\s*:\\s*\").*?(\")[\\s\\S]*$/,\r\n-                `$1${selectedText}$2\\n}`\r\n-            );\r\n-        } else {\r\n-            if (currentValue.endsWith(\"}\")) currentValue = currentValue.slice(0, -1).trim();\r\n-            currentValue = currentValue.replace(/,\\s*$/, \"\");\r\n-            currentValue += `,\\n\\t\"script\":\"${selectedText}\"\\n}`;\r\n-        }\r\n-        editor.setValue(currentValue);\r\n+      // Reset price fields visibility according to nav\r\n+      if (activeNav !== \"limit_order\") hideAll([\"#limitPrice\"]);\r\n+      if (activeNav !== \"sl_order\") hideAll([\"#triggetPrice\"]);\r\n+    });\r\n+  }\r\n \r\n-        // ---------------- Show next fields ----------------\r\n-        productDropdown.parentElement.style.display = \"block\";\r\n+  // Quantity validation & enabling buttons/switches (works for all navs)\r\n+  const qtyContainer = document.querySelector('#quantityBox');\r\n+  const qtyInput = qtyContainer ? (qtyContainer.querySelector('input[type=\"number\"]') || document.getElementById('quantityBox')) : document.getElementById('quantityBox');\r\n+  if (qtyContainer && !qtyInput) {\r\n+    console.warn(\"quantity input not found inside #quantityBox\");\r\n+  }\r\n+  const qtyError = document.getElementById(\"quantityError\");\r\n+\r\n+  function onQtyChange(val) {\r\n+    const ok = Number(val) > 0;\r\n+    if (qtyError) qtyError.style.display = ok ? \"none\" : \"block\";\r\n+    if (!ok) {\r\n+      hideAll([\"#BtnGroup\", \"#toggleSwitchGroup\", \"#limitPrice\", \"#triggetPrice\"]);\r\n+      return;\r\n     }\r\n-});\r\n+    // Make sure the core blocks are visible (flow already did initial show)\r\n+    showAll([\"#BtnGroup\", \"#toggleSwitchGroup\"]);\r\n+  }\r\n \r\n-// ----------------------- Product Selection -----------------------\r\n-productDropdown.addEventListener(\"change\", function () {\r\n-    quantityBox.style.display = \"block\";\r\n-});\r\n+  if (qtyContainer) {\r\n+    qtyContainer.addEventListener(\"input\", (e) => {\r\n+      const target = e.target;\r\n+      if (target && target.matches('input[type=\"number\"]')) {\r\n+        onQtyChange(target.value);\r\n+      }\r\n+    }, true);\r\n+  }\r\n \r\n-// ----------------------- Quantity Input -----------------------\r\n-const quantityInput = quantityBox.querySelector(\"input\");\r\n-quantityInput.addEventListener(\"input\", function () {\r\n-    if (activeNav === \"limit_order\" || activeNav === \"sl_order\") {\r\n-        limitPrice.style.display = \"block\";\r\n-        triggerPrice.style.display = \"block\";\r\n-    } else if (activeNav === \"strategy_order\") {\r\n-        triggerPrice.style.display = \"block\";\r\n-    }\r\n-});\r\n+  // Buy / Sell buttons\r\n+  const buyBtn = document.querySelector(\".buyBtn\");\r\n+  const sellBtn = document.querySelector(\".sellBtn\");\r\n+  if (buyBtn && sellBtn) {\r\n+    buyBtn.addEventListener(\"click\", function () {\r\n+      this.style.background = \"green\";\r\n+      sellBtn.style.background = \"\";\r\n+      setTransactionType(\"BUY\");\r\n+    });\r\n+    sellBtn.addEventListener(\"click\", function () {\r\n+      this.style.background = \"red\";\r\n+      buyBtn.style.background = \"\";\r\n+      setTransactionType(\"SELL\");\r\n+    });\r\n+  }\r\n \r\n-// ----------------------- Trigger / Limit Price -----------------------\r\n-triggerPrice.querySelector(\"input\").addEventListener(\"input\", function () {\r\n-    btnGroup.style.display = \"block\";\r\n-});\r\n+  // Switches\r\n+  const exitOppSwitch = document.getElementById(\"flexSwitchCheck1\");\r\n+  const targetSwitch = document.getElementById(\"flexSwitchCheck2\");\r\n+  const slSwitch = document.getElementById(\"flexSwitchCheck3\");\r\n+  const trailSwitch = document.getElementById(\"flexSwitchCheck4\");\r\n+  const rollSwitch = document.getElementById(\"flexSwitchCheck5\");\r\n \r\n-// ----------------------- Delete & Copy -----------------------\r\n-document.getElementById(\"deleteBtn\").addEventListener(\"click\", function () {\r\n-    editor.setValue(getCodeSnippet(activeNav));\r\n-    resetAllFields();\r\n-});\r\n+  if (exitOppSwitch) exitOppSwitch.addEventListener(\"change\", () => ensureBooleanKey(\"exit_on_opposite\", !!exitOppSwitch.checked));\r\n+  if (targetSwitch) targetSwitch.addEventListener(\"change\", () => ensureBooleanKey(\"is_tgt\", !!targetSwitch.checked));\r\n+  if (slSwitch) slSwitch.addEventListener(\"change\", () => ensureBooleanKey(\"is_sl\", !!slSwitch.checked));\r\n+  if (trailSwitch) trailSwitch.addEventListener(\"change\", () => ensureBooleanKey(\"is_trail_set\", !!trailSwitch.checked));\r\n+  if (rollSwitch) rollSwitch.addEventListener(\"change\", () => ensureBooleanKey(\"is_rollover\", !!rollSwitch.checked));\r\n \r\n-document.getElementById(\"copyBtn\")?.addEventListener(\"click\", function () {\r\n-    const code = editor.getValue();\r\n-    navigator.clipboard.writeText(code)\r\n-        .then(() => alert(\"Code copied to clipboard!\"))\r\n-        .catch(err => console.error(\"Failed to copy: \", err));\r\n-});\r\n+  // Limit price (for limit_order)\r\n+  const priceLimitInput = document.getElementById(\"priceLimit\");\r\n+  if (priceLimitInput) {\r\n+    priceLimitInput.addEventListener(\"input\", function () {\r\n+      const n = Number(this.value);\r\n+      const err = document.querySelector(\"#limitPrice #PriceError\");\r\n+      if (err) err.style.display = n < 0 ? \"block\" : \"none\";\r\n+      if (!Number.isFinite(n) || n < 0) return;\r\n+      upsertJsonStringKey(\"price\", n, { quote: false });\r\n+    });\r\n+  }\r\n+\r\n+  // Trigger price (for sl_order)\r\n+  const triggerInput = document.getElementById(\"triggerprice\");\r\n+  if (triggerInput) {\r\n+    triggerInput.addEventListener(\"input\", function () {\r\n+      const n = Number(this.value);\r\n+      const err = document.querySelector(\"#triggetPrice #PriceError\");\r\n+      if (err) err.style.display = n < 0 ? \"block\" : \"none\";\r\n+      if (!Number.isFinite(n) || n < 0) return;\r\n+      upsertJsonStringKey(\"trigger_price\", n, { quote: false });\r\n+    });\r\n+  }\r\n+\r\n+  // Script search (if present in your HTML)\r\n+  const searchInput = document.getElementById(\"search\");\r\n+  if (searchInput) {\r\n+    searchInput.addEventListener(\"input\", function () {\r\n+      debouncedSuggest(this.value.trim());\r\n+    });\r\n+  }\r\n+}\r\n+\r\n+// Expose helpers if you need to call them from inline HTML (optional)\r\n+//window._applyHelpers = { upsertJsonStringKey, ensureBooleanKey, setTransactionType };\r\n"
                },
                {
                    "date": 1756286378487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,22 +66,22 @@\n // ---- Config (URLs per nav & flows) ----\r\n // Replace these endpoints with your real ones per nav\r\n const ENDPOINTS = {\r\n   strategy_order: {\r\n-    searchScript: \"https://api.example.com/strategy/searchscript\" // original behaviour\r\n+    searchScript: \"https://betabv4.algodelta.com/api/v4/users/jsonbridge/searchscript\" // original behaviour\r\n   },\r\n   limit_order: {\r\n-    searchScript: \"https://api.example.com/limit/searchscript\"\r\n+    searchScript: \"https://betabv4.algodelta.com/api/v4/scripts/searchscriptsbytype\"\r\n   },\r\n   sl_order: {\r\n     // As per your note: for SL, dropdown selection triggers script suggestion from a *different* API\r\n-    searchScript: \"https://api.example.com/sl/searchscript\"\r\n+    searchScript: \"https://betabv4.algodelta.com/api/v4/scripts/searchscriptsbytype\"\r\n   },\r\n   squareoff: {\r\n-    searchScript: \"https://api.example.com/squareoff/searchscript\"\r\n+    searchScript: \"https://betabv4.algodelta.com/api/v4/scripts/searchscriptsbytype\"\r\n   },\r\n   cancel: {\r\n-    searchScript: \"https://api.example.com/cancel/searchscript\"\r\n+    searchScript: \"https://betabv4.algodelta.com/api/v4/scripts/searchscriptsbytype\"\r\n   }\r\n };\r\n \r\n // Flow/visibility per nav (keep it simple & predictable)\r\n"
                },
                {
                    "date": 1756288844339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,53 +1,34 @@\n+// ===============================\r\n+// apply.js - Unified & Optimized\r\n+// ===============================\r\n \r\n-/* =====================\r\n-   Optimized apply.js\r\n-   - Keeps full functionality from syntaxGenerator.js for Strategy Order\r\n-   - Adds config-driven flows for other nav types (limit_order, sl_order, etc.)\r\n-   - Debounced API search per nav\r\n-   - Robust JSON upserts into Monaco editor (string-safe)\r\n-   - Single source of truth for UI state + listeners\r\n-   ===================== */\r\n-\r\n-// ---- Tooltips ----\r\n-var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\r\n+// Tooltip setup\r\n+var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'))\r\n var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\r\n-  return new bootstrap.Tooltip(tooltipTriggerEl);\r\n-});\r\n+  return new bootstrap.Tooltip(tooltipTriggerEl)\r\n+})\r\n \r\n-// ---- Monaco Editor ----\r\n+// Monaco Editor Setup\r\n let editor;\r\n-\r\n require.config({ paths: { vs: \"https://unpkg.com/monaco-editor@0.52.0/min/vs\" } });\r\n \r\n require([\"vs/editor/editor.main\"], function () {\r\n-  window.getCodeSnippet = getCodeSnippet;\r\n-\r\n-  const container = document.getElementsByClassName(\"generatedCode\")[0];\r\n-\r\n-  editor = monaco.editor.create(container, {\r\n+  editor = monaco.editor.create(document.getElementsByClassName(\"generatedCode\")[0], {\r\n     value: getCodeSnippet(\"strategy_order\"),\r\n     language: \"json\",\r\n     theme: \"vs-dark\",\r\n     automaticLayout: true,\r\n-    suggestOnTriggerCharacters: false,\r\n-    quickSuggestions: false,\r\n-    wordBasedSuggestions: false,\r\n-    parameterHints: { enabled: false },\r\n-    inlineSuggest: { enabled: false },\r\n     fontSize: 18,\r\n     minimap: { enabled: false },\r\n     wordWrap: \"on\",\r\n-    scrollbar: { vertical: \"hidden\", horizontal: \"hidden\", handleMouseWheel: false },\r\n+    scrollbar: { vertical: \"hidden\", horizontal: \"hidden\" }\r\n   });\r\n-\r\n-  // After editor is ready, wire UI\r\n-  initUI();\r\n });\r\n \r\n-// ---- Code Snippet Template ----\r\n-function getCodeSnippet(activeType) {\r\n-  if (activeType === \"strategy_order\") {\r\n+// Snippet generator\r\n+function getCodeSnippet(type) {\r\n+  if (type === \"strategy_order\") {\r\n     return `{\r\n   \"type\": \"strategy_order\",\r\n   \"exit_on_opposite\": false,\r\n   \"is_tgt\": false,\r\n@@ -55,317 +36,178 @@\n   \"is_trail_set\": false,\r\n   \"position_size\": \"{{strategy.position_size}}\",\r\n   \"transaction_type\": \"{{strategy.order.action}}\"\r\n }`;\r\n-  } else {\r\n-    return `{\r\n-  \"type\": \"${activeType}\"\r\n+  }\r\n+  return `{\r\n+  \"type\": \"${type}\"\r\n }`;\r\n-  }\r\n }\r\n \r\n-// ---- Config (URLs per nav & flows) ----\r\n-// Replace these endpoints with your real ones per nav\r\n-const ENDPOINTS = {\r\n-  strategy_order: {\r\n-    searchScript: \"https://betabv4.algodelta.com/api/v4/users/jsonbridge/searchscript\" // original behaviour\r\n-  },\r\n-  limit_order: {\r\n-    searchScript: \"https://betabv4.algodelta.com/api/v4/scripts/searchscriptsbytype\"\r\n-  },\r\n-  sl_order: {\r\n-    // As per your note: for SL, dropdown selection triggers script suggestion from a *different* API\r\n-    searchScript: \"https://betabv4.algodelta.com/api/v4/scripts/searchscriptsbytype\"\r\n-  },\r\n-  squareoff: {\r\n-    searchScript: \"https://betabv4.algodelta.com/api/v4/scripts/searchscriptsbytype\"\r\n-  },\r\n-  cancel: {\r\n-    searchScript: \"https://betabv4.algodelta.com/api/v4/scripts/searchscriptsbytype\"\r\n-  }\r\n-};\r\n-\r\n-// Flow/visibility per nav (keep it simple & predictable)\r\n-const FLOWS = {\r\n-  strategy_order: [\r\n-    // Product -> Quantity -> Buy/Sell -> Toggles (target/sl/trail/rollover)\r\n-    { trigger: \"#productDropdown\", show: [\"#quantityBox\", \"#BtnGroup\", \"#toggleSwitchGroup\"] },\r\n-  ],\r\n-  limit_order: [\r\n-    // Product -> Qty -> Limit Price -> Buy/Sell\r\n-    { trigger: \"#productDropdown\", show: [\"#quantityBox\", \"#limitPrice\", \"#BtnGroup\"] },\r\n-  ],\r\n-  sl_order: [\r\n-    // Product -> Qty -> Trigger Price -> Buy/Sell\r\n-    { trigger: \"#productDropdown\", show: [\"#quantityBox\", \"#triggetPrice\", \"#BtnGroup\"] },\r\n-  ],\r\n-};\r\n-\r\n-// ---- State ----\r\n-let activeNav = \"strategy_order\"; // default\r\n+// Active Nav handling\r\n+let activeNav = \"strategy_order\";\r\n const navLinks = document.querySelectorAll(\".nav-link\");\r\n \r\n-// ---- Utilities ----\r\n-function debounce(fn, wait) {\r\n-  let t;\r\n-  return (...args) => {\r\n-    clearTimeout(t);\r\n-    t = setTimeout(() => fn.apply(null, args), wait);\r\n-  };\r\n-}\r\n+navLinks.forEach(link => {\r\n+  link.addEventListener(\"click\", (e) => {\r\n+    e.preventDefault();\r\n+    navLinks.forEach(l => l.classList.remove(\"active\"));\r\n+    link.classList.add(\"active\");\r\n+    activeNav = link.getAttribute(\"data-type\");\r\n+    localStorage.setItem(\"activenav\", JSON.stringify(activeNav));\r\n+    editor.setValue(getCodeSnippet(activeNav));\r\n+    resetUIForNav();\r\n+  });\r\n+});\r\n \r\n-// Safely add/replace a top-level JSON key in the string shown in Monaco\r\n-function upsertJsonStringKey(key, value, { quote = true } = {}) {\r\n-  if (!editor) return;\r\n-  let code = editor.getValue();\r\n-  const escapedKey = key.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\r\n-  const pattern = new RegExp(`(\"` + escapedKey + `\"\\s*:\\s*)([^,}\\\\n]+)`, \"m\");\r\n-  const finalVal = quote ? `\"${value}\"` : `${value}`;\r\n+// Reset UI fields when nav changes\r\n+function resetUIForNav() {\r\n+  const containers = [\r\n+    \"#scriptsearchbox\", \"#optionSelection\", \"#premiumval\", \"#maxvariationCtn\",\r\n+    \"#AtmGap\", \"#expiryGap\", \"#expiryType\", \"#productType\", \"#quantityBox\",\r\n+    \"#limitPrice\", \"#triggetPrice\", \"#BtnGroup\", \"#toggleSwitchGroup\"\r\n+  ];\r\n+  containers.forEach(sel => {\r\n+    const el = document.querySelector(sel);\r\n+    if (el) {\r\n+      el.style.display = \"none\";\r\n+      el.querySelectorAll(\"input,select\").forEach(i => { i.value = \"\"; });\r\n+    }\r\n+  });\r\n \r\n-  if (pattern.test(code)) {\r\n-    code = code.replace(pattern, `$1${finalVal}`);\r\n-  } else {\r\n-    // append before the last }\r\n-    code = code.trim();\r\n-    if (code.endsWith(\"}\")) code = code.slice(0, -1);\r\n-    // remove trailing comma if present\r\n-    code = code.replace(/,\\s*$/, \"\");\r\n-    code += `,\\n  \"${key}\": ${finalVal}\\n}`;\r\n+  // Special case: SquareOff / Cancel → always show ScriptType, Script, Product\r\n+  if (activeNav === \"squareoff_position\" || activeNav === \"cancel_order\") {\r\n+    [\"#scriptType\", \"#scriptsearchbox\", \"#productType\"].forEach(sel => {\r\n+      const el = document.querySelector(sel);\r\n+      if (el) {\r\n+        el.style.display = \"block\";\r\n+        el.querySelector(\"b\").innerHTML = el.querySelector(\"b\").innerHTML.replace(\"*\", \"Optional\");\r\n+      }\r\n+    });\r\n   }\r\n-  editor.setValue(code);\r\n }\r\n \r\n-function setTransactionType(type) {\r\n-  upsertJsonStringKey(\"transaction_type\", type, { quote: true });\r\n-}\r\n-\r\n-function ensureBooleanKey(key, boolVal) {\r\n+// JSON Upsert helper\r\n+function upsertJson(key, value, quote = true) {\r\n   if (!editor) return;\r\n   let code = editor.getValue();\r\n-  const pattern = new RegExp(`(\"` + key + `\"\\s*:\\s*)(true|false)`, \"m\");\r\n-  if (pattern.test(code)) {\r\n-    code = code.replace(pattern, `$1${boolVal}`);\r\n+  const regex = new RegExp(`\"${key}\"\\\\s*:\\\\s*(\".+?\"|\\\\d+|true|false)`);\r\n+  const newVal = quote ? `\"${value}\"` : value;\r\n+  if (regex.test(code)) {\r\n+    code = code.replace(regex, `\"${key}\": ${newVal}`);\r\n   } else {\r\n-    code = code.trim();\r\n-    if (code.endsWith(\"}\")) code = code.slice(0, -1);\r\n-    code = code.replace(/,\\s*$/, \"\");\r\n-    code += `,\\n  \"${key}\": ${boolVal}\\n}`;\r\n+    code = code.trim().replace(/}$/, `,\\n  \"${key}\": ${newVal}\\n}`);\r\n   }\r\n   editor.setValue(code);\r\n }\r\n \r\n-// Reset and hide a list of selectors\r\n-function hideAll(selectors) {\r\n-  selectors.forEach(sel => {\r\n-    const el = document.querySelector(sel);\r\n-    if (!el) return;\r\n-    el.style.display = \"none\";\r\n-    // soft reset for inputs\r\n-    const inputs = el.querySelectorAll(\"input, select, textarea\");\r\n-    inputs.forEach(inp => {\r\n-      if (inp.tagName === \"SELECT\") inp.selectedIndex = 0;\r\n-      else if (inp.type === \"checkbox\" || inp.type === \"radio\") inp.checked = false;\r\n-      else inp.value = \"\";\r\n-    });\r\n-  });\r\n-}\r\n+// Buy/Sell buttons\r\n+document.querySelector(\".buyBtn\")?.addEventListener(\"click\", () => {\r\n+  document.querySelector(\".buyBtn\").style.background = \"green\";\r\n+  document.querySelector(\".sellBtn\").style.background = \"\";\r\n+  upsertJson(\"transaction_type\", \"BUY\", true);\r\n+});\r\n+document.querySelector(\".sellBtn\")?.addEventListener(\"click\", () => {\r\n+  document.querySelector(\".sellBtn\").style.background = \"red\";\r\n+  document.querySelector(\".buyBtn\").style.background = \"\";\r\n+  upsertJson(\"transaction_type\", \"SELL\", true);\r\n+});\r\n \r\n-function showAll(selectors) {\r\n-  selectors.forEach(sel => {\r\n-    const el = document.querySelector(sel);\r\n-    if (el) el.style.display = \"block\";\r\n-  });\r\n-}\r\n-\r\n-// ---- API: Script suggestions (per nav) ----\r\n-async function fetchScriptSuggestions(q) {\r\n-  const currentNav = activeNav || \"strategy_order\";\r\n-  const url = (ENDPOINTS[currentNav] && ENDPOINTS[currentNav].searchScript) || ENDPOINTS.strategy_order.searchScript;\r\n-  try {\r\n-    const res = await fetch(url, {\r\n-      method: \"POST\",\r\n-      headers: { \"Content-Type\": \"application/json\" },\r\n-      body: JSON.stringify({ query: q })\r\n-    });\r\n-    if (!res.ok) throw new Error(\"Network error\");\r\n-    const data = await res.json();\r\n-    // Expect data as array of { name, value } or strings\r\n-    return Array.isArray(data) ? data : [];\r\n-  } catch (e) {\r\n-    console.warn(\"fetchScriptSuggestions failed:\", e.message);\r\n-    return [];\r\n+// Switch toggles\r\n+[\"exit_on_opposite\",\"is_tgt\",\"is_sl\",\"is_trail_set\",\"is_rollover\"].forEach((key,i)=>{\r\n+  const el=document.getElementById(`flexSwitchCheck${i+1}`);\r\n+  if(el){\r\n+    el.addEventListener(\"change\",()=>upsertJson(key,el.checked,false));\r\n   }\r\n-}\r\n+});\r\n \r\n-const debouncedSuggest = debounce(async (q) => {\r\n-  const list = document.getElementById(\"suggestList\");\r\n-  if (!list) return;\r\n-  list.innerHTML = \"\";\r\n-  if (!q) return;\r\n+// Delete & Copy\r\n+document.getElementById(\"deleteBtn\").addEventListener(\"click\", () => {\r\n+  editor.setValue(getCodeSnippet(activeNav));\r\n+});\r\n+document.getElementById(\"copyBtn\").addEventListener(\"click\", () => {\r\n+  navigator.clipboard.writeText(editor.getValue()).then(()=>alert(\"Code copied!\"));\r\n+});\r\n \r\n-  const suggestions = await fetchScriptSuggestions(q);\r\n-  suggestions.forEach(item => {\r\n-    const text = typeof item === \"string\" ? item : (item.name || item.value || \"\");\r\n-    if (!text) return;\r\n-    const li = document.createElement(\"li\");\r\n-    li.textContent = text;\r\n-    li.className = \"list-group-item\";\r\n-    li.addEventListener(\"click\", () => {\r\n-      upsertJsonStringKey(\"script\", text, { quote: true });\r\n-      list.innerHTML = \"\";\r\n-      const input = document.getElementById(\"search\");\r\n-      if (input) input.value = text;\r\n-    });\r\n-    list.appendChild(li);\r\n+// Script Search\r\n+const searchInput=document.getElementById(\"search\");\r\n+const dropdown=document.getElementById(\"dropdown\");\r\n+const token=\"\"; // add your token\r\n+async function fetchScripts(query){\r\n+  if(!query) return [];\r\n+  let url=\"https://betabv4.algodelta.com/api/v4/users/jsonbridge/searchscript\";\r\n+  if(activeNav===\"squareoff_position\"||activeNav===\"cancel_order\"){\r\n+    url=\"\"; // TODO: insert SquareOff/Cancel API URL\r\n+  }\r\n+  const res=await fetch(url,{\r\n+    method:\"POST\",\r\n+    headers:{\"Content-Type\":\"application/json\",\"Authorization\":token},\r\n+    body:JSON.stringify({script:query,type:document.getElementById(\"dropdown1\").value})\r\n   });\r\n-}, 350);\r\n+  const data=await res.json();\r\n+  return data.data||[];\r\n+}\r\n+searchInput?.addEventListener(\"input\", debounce(async(e)=>{\r\n+  const val=e.target.value;\r\n+  const suggestions=await fetchScripts(val);\r\n+  dropdown.innerHTML=suggestions.map(s=>`<li>${s.script||s}</li>`).join(\"\");\r\n+  dropdown.style.display=suggestions.length?\"block\":\"none\";\r\n+},300));\r\n \r\n-// ---- Main UI wiring ----\r\n-function initUI() {\r\n-  // Nav links\r\n-  navLinks.forEach(link => {\r\n-    link.addEventListener(\"click\", (e) => {\r\n-      e.preventDefault();\r\n-      navLinks.forEach(l => l.classList.remove(\"active\"));\r\n-      link.classList.add(\"active\");\r\n-      activeNav = link.getAttribute(\"data-type\") || \"strategy_order\";\r\n-      localStorage.setItem(\"activenav\", JSON.stringify(activeNav));\r\n-      editor.setValue(getCodeSnippet(activeNav));\r\n-\r\n-      // hide all optional blocks on nav change\r\n-      hideAll([\"#quantityBox\", \"#limitPrice\", \"#triggetPrice\", \"#BtnGroup\", \"#toggleSwitchGroup\"]);\r\n-      const search = document.getElementById(\"search\");\r\n-      if (search) { search.value = \"\"; const list = document.getElementById(\"suggestList\"); if (list) list.innerHTML = \"\"; }\r\n-    });\r\n-  });\r\n-\r\n-  // Delete = reset JSON to template of current nav\r\n-  const deleteBtn = document.getElementById(\"deleteBtn\");\r\n-  if (deleteBtn) {\r\n-    deleteBtn.addEventListener(\"click\", () => {\r\n-      const activeNavItem = JSON.parse(localStorage.getItem(\"activenav\") || '\"strategy_order\"');\r\n-      editor.setValue(getCodeSnippet(activeNavItem));\r\n-      const scriptType = document.getElementById(\"dropdown1\");\r\n-      if (scriptType) scriptType.selectedIndex = 0;\r\n-    });\r\n+dropdown?.addEventListener(\"click\",(e)=>{\r\n+  if(e.target.tagName===\"LI\"){\r\n+    let selected=e.target.textContent.split(\"(\")[0];\r\n+    searchInput.value=selected;\r\n+    upsertJson(\"script\",selected,true);\r\n+    dropdown.innerHTML=\"\";dropdown.style.display=\"none\";\r\n+    if(activeNav===\"strategy_order\"||activeNav===\"limit_order\"||activeNav===\"sl_order\"){\r\n+      document.getElementById(\"productType\").style.display=\"block\";\r\n+    }\r\n   }\r\n+});\r\n \r\n-  // Copy\r\n-  const copyBtn = document.getElementById(\"copyBtn\");\r\n-  if (copyBtn) {\r\n-    copyBtn.addEventListener(\"click\", () => {\r\n-      if (!editor) return;\r\n-      const code = editor.getValue();\r\n-      navigator.clipboard.writeText(code).then(() => alert(\"Code copied to clipboard!\"));\r\n-    });\r\n-  }\r\n+// Product Dropdown\r\n+document.getElementById(\"productDropdown\")?.addEventListener(\"change\",function(){\r\n+  upsertJson(\"product\",this.value,true);\r\n+  document.getElementById(\"quantityBox\").style.display=\"block\";\r\n+});\r\n \r\n-  // Product -> shows downstream controls per nav (FLOWS)\r\n-  const productDropdown = document.getElementById(\"productDropdown\");\r\n-  if (productDropdown) {\r\n-    productDropdown.addEventListener(\"change\", function () {\r\n-      const val = this.value;\r\n-      if (!val) return;\r\n-      upsertJsonStringKey(\"product\", val, { quote: true });\r\n+// Quantity\r\n+document.getElementById(\"quantityBox\")?.addEventListener(\"input\",function(){\r\n+  const q=Number(this.value);\r\n+  if(q<=0){document.getElementById(\"quantityError\").style.display=\"block\";hideDependents();return;}\r\n+  document.getElementById(\"quantityError\").style.display=\"none\";\r\n+  upsertJson(\"quantity\",q,false);\r\n \r\n-      const flow = FLOWS[activeNav] || [];\r\n-      const rule = flow.find(r => r.trigger === \"#productDropdown\");\r\n-      if (rule) showAll(rule.show);\r\n-\r\n-      // Reset price fields visibility according to nav\r\n-      if (activeNav !== \"limit_order\") hideAll([\"#limitPrice\"]);\r\n-      if (activeNav !== \"sl_order\") hideAll([\"#triggetPrice\"]);\r\n-    });\r\n+  if(activeNav===\"strategy_order\"){\r\n+    document.getElementById(\"BtnGroup\").style.display=\"block\";\r\n+    document.getElementById(\"toggleSwitchGroup\").style.display=\"block\";\r\n   }\r\n+  if(activeNav===\"limit_order\") document.getElementById(\"limitPrice\").style.display=\"block\";\r\n+  if(activeNav===\"sl_order\") document.getElementById(\"triggetPrice\").style.display=\"block\";\r\n+});\r\n+function hideDependents(){\r\n+  [\"#BtnGroup\",\"#toggleSwitchGroup\",\"#limitPrice\",\"#triggetPrice\"].forEach(sel=>{\r\n+    const el=document.querySelector(sel);if(el) el.style.display=\"none\";\r\n+  });\r\n+}\r\n \r\n-  // Quantity validation & enabling buttons/switches (works for all navs)\r\n-  const qtyContainer = document.querySelector('#quantityBox');\r\n-  const qtyInput = qtyContainer ? (qtyContainer.querySelector('input[type=\"number\"]') || document.getElementById('quantityBox')) : document.getElementById('quantityBox');\r\n-  if (qtyContainer && !qtyInput) {\r\n-    console.warn(\"quantity input not found inside #quantityBox\");\r\n-  }\r\n-  const qtyError = document.getElementById(\"quantityError\");\r\n+// Limit price\r\n+document.getElementById(\"priceLimit\")?.addEventListener(\"input\",function(){\r\n+  const n=Number(this.value);\r\n+  if(n<0){document.querySelector(\"#limitPrice #PriceError\").style.display=\"block\";return;}\r\n+  document.querySelector(\"#limitPrice #PriceError\").style.display=\"none\";\r\n+  upsertJson(\"price\",n,false);\r\n+});\r\n \r\n-  function onQtyChange(val) {\r\n-    const ok = Number(val) > 0;\r\n-    if (qtyError) qtyError.style.display = ok ? \"none\" : \"block\";\r\n-    if (!ok) {\r\n-      hideAll([\"#BtnGroup\", \"#toggleSwitchGroup\", \"#limitPrice\", \"#triggetPrice\"]);\r\n-      return;\r\n-    }\r\n-    // Make sure the core blocks are visible (flow already did initial show)\r\n-    showAll([\"#BtnGroup\", \"#toggleSwitchGroup\"]);\r\n-  }\r\n+// Trigger price\r\n+document.getElementById(\"triggerprice\")?.addEventListener(\"input\",function(){\r\n+  const n=Number(this.value);\r\n+  if(n<0){document.querySelector(\"#triggetPrice #PriceError\").style.display=\"block\";return;}\r\n+  document.querySelector(\"#triggetPrice #PriceError\").style.display=\"none\";\r\n+  upsertJson(\"trigger_price\",n,false);\r\n+});\r\n \r\n-  if (qtyContainer) {\r\n-    qtyContainer.addEventListener(\"input\", (e) => {\r\n-      const target = e.target;\r\n-      if (target && target.matches('input[type=\"number\"]')) {\r\n-        onQtyChange(target.value);\r\n-      }\r\n-    }, true);\r\n-  }\r\n-\r\n-  // Buy / Sell buttons\r\n-  const buyBtn = document.querySelector(\".buyBtn\");\r\n-  const sellBtn = document.querySelector(\".sellBtn\");\r\n-  if (buyBtn && sellBtn) {\r\n-    buyBtn.addEventListener(\"click\", function () {\r\n-      this.style.background = \"green\";\r\n-      sellBtn.style.background = \"\";\r\n-      setTransactionType(\"BUY\");\r\n-    });\r\n-    sellBtn.addEventListener(\"click\", function () {\r\n-      this.style.background = \"red\";\r\n-      buyBtn.style.background = \"\";\r\n-      setTransactionType(\"SELL\");\r\n-    });\r\n-  }\r\n-\r\n-  // Switches\r\n-  const exitOppSwitch = document.getElementById(\"flexSwitchCheck1\");\r\n-  const targetSwitch = document.getElementById(\"flexSwitchCheck2\");\r\n-  const slSwitch = document.getElementById(\"flexSwitchCheck3\");\r\n-  const trailSwitch = document.getElementById(\"flexSwitchCheck4\");\r\n-  const rollSwitch = document.getElementById(\"flexSwitchCheck5\");\r\n-\r\n-  if (exitOppSwitch) exitOppSwitch.addEventListener(\"change\", () => ensureBooleanKey(\"exit_on_opposite\", !!exitOppSwitch.checked));\r\n-  if (targetSwitch) targetSwitch.addEventListener(\"change\", () => ensureBooleanKey(\"is_tgt\", !!targetSwitch.checked));\r\n-  if (slSwitch) slSwitch.addEventListener(\"change\", () => ensureBooleanKey(\"is_sl\", !!slSwitch.checked));\r\n-  if (trailSwitch) trailSwitch.addEventListener(\"change\", () => ensureBooleanKey(\"is_trail_set\", !!trailSwitch.checked));\r\n-  if (rollSwitch) rollSwitch.addEventListener(\"change\", () => ensureBooleanKey(\"is_rollover\", !!rollSwitch.checked));\r\n-\r\n-  // Limit price (for limit_order)\r\n-  const priceLimitInput = document.getElementById(\"priceLimit\");\r\n-  if (priceLimitInput) {\r\n-    priceLimitInput.addEventListener(\"input\", function () {\r\n-      const n = Number(this.value);\r\n-      const err = document.querySelector(\"#limitPrice #PriceError\");\r\n-      if (err) err.style.display = n < 0 ? \"block\" : \"none\";\r\n-      if (!Number.isFinite(n) || n < 0) return;\r\n-      upsertJsonStringKey(\"price\", n, { quote: false });\r\n-    });\r\n-  }\r\n-\r\n-  // Trigger price (for sl_order)\r\n-  const triggerInput = document.getElementById(\"triggerprice\");\r\n-  if (triggerInput) {\r\n-    triggerInput.addEventListener(\"input\", function () {\r\n-      const n = Number(this.value);\r\n-      const err = document.querySelector(\"#triggetPrice #PriceError\");\r\n-      if (err) err.style.display = n < 0 ? \"block\" : \"none\";\r\n-      if (!Number.isFinite(n) || n < 0) return;\r\n-      upsertJsonStringKey(\"trigger_price\", n, { quote: false });\r\n-    });\r\n-  }\r\n-\r\n-  // Script search (if present in your HTML)\r\n-  const searchInput = document.getElementById(\"search\");\r\n-  if (searchInput) {\r\n-    searchInput.addEventListener(\"input\", function () {\r\n-      debouncedSuggest(this.value.trim());\r\n-    });\r\n-  }\r\n+// Debounce helper\r\n+function debounce(fn,delay){\r\n+  let t;return(...args)=>{clearTimeout(t);t=setTimeout(()=>fn.apply(this,args),delay);}\r\n }\r\n-\r\n-// Expose helpers if you need to call them from inline HTML (optional)\r\n-//window._applyHelpers = { upsertJsonStringKey, ensureBooleanKey, setTransactionType };\r\n"
                },
                {
                    "date": 1756288939652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n \r\n // Script Search\r\n const searchInput=document.getElementById(\"search\");\r\n const dropdown=document.getElementById(\"dropdown\");\r\n-const token=\"\"; // add your token\r\n+const token=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoyLCJmcmNoX2lkIjoxLCJlbWFpbCI6ImRldjMuYWxnb2RlbHRhQGdtYWlsLmNvbSIsIm1vYmlsZV9ubyI6IjkzMTMxODM4NDciLCJjdXN0X2lkIjoiNzM1NTQ3IiwiZW52IjoibWFpbiIsInVzZXJfdHlwZSI6InVzZXIiLCJpYXQiOjE3NTYyODg4OTQsImV4cCI6MTc1NjM3NTI5NH0.rtQOXb5OZ6Cab9_JNnWe3_eVLp3b_xpvNYSbGspcRpQ\"; // add your token\r\n async function fetchScripts(query){\r\n   if(!query) return [];\r\n   let url=\"https://betabv4.algodelta.com/api/v4/users/jsonbridge/searchscript\";\r\n   if(activeNav===\"squareoff_position\"||activeNav===\"cancel_order\"){\r\n"
                }
            ],
            "date": 1756230899400,
            "name": "Commit-0",
            "content": "// ------------------ Tooltips ------------------\r\nvar tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\r\nvar tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\r\n  return new bootstrap.Tooltip(tooltipTriggerEl);\r\n});\r\n\r\n// ------------------ Monaco Editor ------------------\r\nlet editor;\r\n\r\nrequire.config({ paths: { vs: \"https://unpkg.com/monaco-editor@0.52.0/min/vs\" } });\r\n\r\nrequire([\"vs/editor/editor.main\"], function () {\r\n  const container = document.getElementsByClassName(\"generatedCode\")[0];\r\n\r\n  function getCodeSnippet(activeType) {\r\n    if (activeType === \"strategy_order\") {\r\n      return `{\r\n  \"type\": \"strategy_order\",\r\n  \"exit_on_opposite\": false,\r\n  \"is_tgt\": false,\r\n  \"is_sl\": false,\r\n  \"is_trail_set\": false,\r\n  \"position_size\": \"{{strategy.position_size}}\",\r\n  \"transaction_type\": \"{{strategy.order.action}}\"\r\n}`;\r\n    } else {\r\n      return `{\r\n  \"type\": \"${activeType}\"\r\n}`;\r\n    }\r\n  }\r\n\r\n  window.getCodeSnippet = getCodeSnippet;\r\n\r\n  editor = monaco.editor.create(container, {\r\n    value: getCodeSnippet(\"strategy_order\"),\r\n    language: \"json\",\r\n    theme: \"vs-dark\",\r\n    automaticLayout: true,\r\n    fontSize: 18,\r\n    minimap: { enabled: false },\r\n    wordWrap: \"on\",\r\n    scrollbar: { vertical: \"hidden\", horizontal: \"hidden\", handleMouseWheel: false }\r\n  });\r\n});\r\n\r\n// ------------------ Navbar ------------------\r\nlet activeNav = \"strategy_order\"; // default\r\nconst navLinks = document.querySelectorAll(\".nav-link\");\r\n\r\nnavLinks.forEach(link => {\r\n  link.addEventListener(\"click\", e => {\r\n    e.preventDefault();\r\n    navLinks.forEach(l => l.classList.remove(\"active\"));\r\n    link.classList.add(\"active\");\r\n    activeNav = link.getAttribute(\"data-type\");\r\n    localStorage.setItem(\"activenav\", JSON.stringify(activeNav));\r\n    editor.setValue(getCodeSnippet(activeNav));\r\n    resetAllFields();\r\n  });\r\n});\r\n\r\n// ------------------ Reset & Copy ------------------\r\ndocument.getElementById(\"deleteBtn\").addEventListener(\"click\", function () {\r\n  const activeNavItem = JSON.parse(localStorage.getItem(\"activenav\"));\r\n  editor.setValue(getCodeSnippet(activeNavItem));\r\n  resetAllFields();\r\n});\r\n\r\ndocument.getElementById(\"copyBtn\").addEventListener(\"click\", function () {\r\n  if (!editor) return;\r\n  navigator.clipboard.writeText(editor.getValue())\r\n    .then(() => alert(\"Code copied to clipboard!\"))\r\n    .catch(err => console.error(err));\r\n});\r\n\r\n// ------------------ Field Dependencies ------------------\r\nfunction resetAllFields() {\r\n  const containers = [\r\n    \"#optionSelection\", \"#scriptsearchbox\", \"#premiumval\", \"#maxvariationCtn\",\r\n    \"#AtmGap\", \"#expiryGap\", \"#expiryType\", \"#productType\", \"#quantityBox\",\r\n    \"#limitPrice\", \"#triggetPrice\", \"#BtnGroup\", \"#toggleSwitchGroup\"\r\n  ];\r\n  containers.forEach(c => {\r\n    const cont = document.querySelector(c);\r\n    if (cont) {\r\n      cont.style.display = \"none\";\r\n      const input = cont.querySelector(\"input, select\");\r\n      if (input) {\r\n        if (input.tagName === \"SELECT\") input.selectedIndex = 0;\r\n        else input.value = \"\";\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n// ------------------ Script Type ------------------\r\nconst scriptType = document.getElementById(\"dropdown1\");\r\nconst optionSelection = document.getElementById(\"optionSelection\");\r\nconst searchBox = document.getElementById(\"scriptsearchbox\");\r\n\r\nscriptType.addEventListener(\"change\", function () {\r\n  resetAllFields();\r\n  if (activeNav === \"strategy_order\" && (scriptType.value === \"CE\" || scriptType.value === \"PE\")) {\r\n    optionSelection.style.display = \"block\";\r\n  } else {\r\n    searchBox.style.display = \"block\";\r\n  }\r\n});\r\n\r\n// ------------------ Option Selection ------------------\r\nconst atmDropdown = document.getElementById(\"atmdropdown\");\r\natmDropdown.addEventListener(\"change\", function () {\r\n  resetAllFields();\r\n  document.getElementById(\"AtmGap\").style.display = \"block\";\r\n});\r\n\r\n// ------------------ Script Search ------------------\r\nconst searchInput = document.getElementById(\"search\");\r\nconst dropdown = document.getElementById('dropdown');\r\nlet token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoyLCJmcmNoX2lkIjoxLCJlbWFpbCI6ImRldjMuYWxnb2RlbHRhQGdtYWlsLmNvbSIsIm1vYmlsZV9ubyI6IjkzMTMxODM4NDciLCJjdXN0X2lkIjoiNzM1NTQ3IiwiZW52IjoibWFpbiIsInVzZXJfdHlwZSI6InVzZXIiLCJpYXQiOjE3NTYxODc4MTIsImV4cCI6MTc1NjI3NDIxMn0.gXoY2DWtFgVNYrud7j88O-KLCwlpkUX6h30ANgYu6TU\"; // truncated\r\n\r\ndocument.addEventListener('click', e => {\r\n  if (!searchInput.contains(e.target) && !dropdown.contains(e.target)) dropdown.style.display = 'none';\r\n});\r\n\r\nfunction debounce(func, delay) {\r\n  let timer;\r\n  return function (...args) {\r\n    clearTimeout(timer);\r\n    timer = setTimeout(() => func.apply(this, args), delay);\r\n  };\r\n}\r\n\r\n// ------------------ Fetch Suggestions ------------------\r\nasync function fetchSuggestions(query) {\r\n  if (!query) {\r\n    dropdown.style.display = 'none';\r\n    dropdown.innerHTML = '';\r\n    return;\r\n  }\r\n\r\n  let apiUrl;\r\n  let bodyData = { script: query };\r\n\r\n  if (activeNav === \"strategy_order\") {\r\n    apiUrl = \"https://betabv4.algodelta.com/api/v4/users/jsonbridge/searchscript\";\r\n    bodyData.type = scriptType.value;\r\n    if (scriptType.value === \"CE\" || scriptType.value === \"PE\") {\r\n      bodyData.option_type = atmDropdown.value;\r\n    }\r\n  } else {\r\n    apiUrl = \"https://betabv4.algodelta.com/api/v4/users/jsonbridge/searchscriptv2\"; // Different API\r\n    bodyData.type = scriptType.value;\r\n  }\r\n\r\n  try {\r\n    const res = await fetch(apiUrl, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\", \"Authorization\": token },\r\n      body: JSON.stringify(bodyData)\r\n    });\r\n    const data = await res.json();\r\n    const suggestions = data.data || [];\r\n    dropdown.innerHTML = suggestions.map(item => `<li>${item.script} (${item.exchange})</li>`).join('');\r\n    dropdown.style.display = suggestions.length ? 'block' : 'none';\r\n  } catch (err) { console.error(err); }\r\n}\r\n\r\nsearchInput.addEventListener('input', debounce(e => fetchSuggestions(e.target.value), 300));\r\n\r\ndropdown.addEventListener('click', e => {\r\n  if (e.target.tagName === 'LI') {\r\n    let selectedText = e.target.textContent.split(\"(\")[0].trim();\r\n    searchInput.value = selectedText;\r\n    dropdown.style.display = 'none';\r\n\r\n    let currentValue = editor.getValue().trim();\r\n    if (/\"script\"\\s*:\\s*\".*?\"/.test(currentValue)) {\r\n      currentValue = currentValue.replace(/(\"script\"\\s*:\\s*\").*?(\")[\\s\\S]*$/, `$1${selectedText}$2\\n}`);\r\n    } else {\r\n      if (currentValue.endsWith(\"}\")) currentValue = currentValue.slice(0, -1).trim();\r\n      currentValue = currentValue.replace(/,\\s*$/, \"\");\r\n      currentValue += `,\\n\\t\"script\":\"${selectedText}\"\\n}`;\r\n    }\r\n    editor.setValue(currentValue);\r\n  }\r\n});\r\n"
        }
    ]
}